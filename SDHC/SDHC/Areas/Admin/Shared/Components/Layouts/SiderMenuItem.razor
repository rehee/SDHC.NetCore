@using Common.Models.ViewModels
@inject NavigationManager NavigationManager
<li class="@(Item.IsNavHeader?"nav-header":"nav-item") @(isChildrenActive?"menu-is-opening menu-open":"")">
  @if (!Item.IsNavHeader)
  {
    <NavLink href="@Item.Url" class="nav-link" activeClassName="selectedLink"
             Match="@(Item.ActiveFullPath?NavLinkMatch.All:NavLinkMatch.Prefix)">
      <i class="nav-icon fas @Item.Icon"></i>
      <p>
        @Item.DisplayName
        @if (Item.HasBadge)
        {
          <span class="badge @Item.Badge right">
            @Item.BadgeValue
          </span>
        }
        @if (Item.HasSubNavigationItem)
        {
          <i class="fas fa-angle-left right"></i>
        }

      </p>
    </NavLink>
    @if (Item.HasSubNavigationItem)
    {
      <ul class="nav nav-treeview">
        @foreach (var item in Item.SubNavigationItem)
        {
          <SiderMenuItem @key="item" Item="item" ItemIsActived="itemIsActived"></SiderMenuItem>
        }
      </ul>
    }
  }
  else
  {
    <text>@Item.DisplayName.ToUpper()</text>
  }
</li>
@code {
  [Parameter]
  public INavigationItem Item { get; set; }

  private bool isChildrenActive { get; set; } = false;

  private void itemIsActived()
  {
    isChildrenActive = true;
    StateHasChanged();
  }

  [Parameter]
  public Action ItemIsActived { get; set; }

  protected override void OnInitialized()
  {
    if (ItemIsActived == null)
    {
      return;
    }
    var activeUrl = $"{NavigationManager.BaseUri.Substring(0, NavigationManager.BaseUri.Length - 1)}{Item.Url}";
    if (Item.ActiveFullPath)
    {
      if (NavigationManager.Uri.Equals(activeUrl, StringComparison.InvariantCultureIgnoreCase))
      {
        ItemIsActived();
      }
    }
    else
    {
      var length = NavigationManager.Uri.IndexOf(activeUrl, StringComparison.InvariantCultureIgnoreCase);
      if (length == 0)
      {
        ItemIsActived();
      }
    }
  }
}
